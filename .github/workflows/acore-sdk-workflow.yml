name: A-core sdk workflow

on:
  workflow_call:
    inputs:
      bump-type:
        required: false
        type: string

jobs:
  check-pr-label:
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Check PR label
        id: check
        uses: XX9-YE-SONG/acore-cicd-templates/.github/actions/check-pr-label@main
      - name: Fail if incorrect label count
        if: steps.check.outputs.status == 'failure'
        run: |
          echo "Error: Pull request must have exactly one of: major, minor, patch, none."
          exit 1

  determine-version:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.det.outputs.new_version }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v5
      - name: Determine version
        id: det
        uses: XX9-YE-SONG/acore-cicd-templates/.github/actions/determine-version@main
        with:
          bump-type: ${{ inputs.bump-type }}

  build-and-scan-prod:
    name: Build and scan
    needs: [determine-version]
    if: github.ref == 'refs/heads/main'
    env:
      REGISTRY: ghcr.io
      IMAGE_REPO: ${{ github.repository_owner }}/acore-sdk-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute full image name (lowercase)
        id: name
        shell: bash
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/$(echo "${{ env.IMAGE_REPO }}" | tr '[:upper:]' '[:lower:]')"
          echo "image=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Generate image tags and labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.name.outputs.image }}
          labels: |
            org.opencontainers.image.version=${{ needs.determine-version.outputs.new_version }}

      - name: Build image with Buildah
        id: build
        uses: redhat-actions/buildah-build@v2
        with:
          context: .
          containerfiles: |
            ./Containerfile
          image: ${{ steps.name.outputs.image }}
          # build a single local tag; we'll retag and push later
          tags: |
            build
          labels: ${{ steps.meta.outputs.labels }}
          oci: true

      - name: Save image to docker-archive (for Trivy)
        shell: bash
        run: |
          podman image save --format docker-archive -o ./image.tar "${{ steps.name.outputs.image }}:build"

      - name: Trivy scan (image tar)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          input: ./image.tar
          format: table
          severity: CRITICAL,HIGH
          exit-code: '0'

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-image
          path: ./image.tar
          retention-days: 1

  push-image-prod:
    if: github.ref == 'refs/heads/main'
    env:
      REGISTRY: ghcr.io
      IMAGE_REPO: ${{ github.repository_owner }}/acore-sdk-test
    name: Push image to GHCR
    runs-on: ubuntu-24.04
    needs: [build-and-scan-prod]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: built-image
          path: .

      - name: Compute full image name (lowercase)
        id: name
        shell: bash
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/$(echo "${{ env.IMAGE_REPO }}" | tr '[:upper:]' '[:lower:]')"
          echo "image=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Generate image tags to push
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.name.outputs.image }}
          tags: |
            type=sha
            type=raw,value=latest
            type=raw,value=${{ needs.determine-version.outputs.new_version }}

      - name: Podman login to GHCR
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load image from tar
        shell: bash
        run: |
          podman load -i image.tar

      - name: Push all tags
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="${{ steps.name.outputs.image }}"
          LOCAL_TAG="${IMAGE}:build"
          echo "$TAGS" | while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            echo "Tagging and pushing $tag"
            podman tag "$LOCAL_TAG" "$tag"
            podman push "$tag"
          done

  bump-version:
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    needs: [determine-version, build-and-scan-prod, push-image-prod]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Tag new version if needed
        uses: XX9-YE-SONG/acore-cicd-templates/.github/actions/bump-version@main
        with:
          new_version: ${{ needs.determine-version.outputs.new_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
