name: A-core sdk workflow

on:
  workflow_call:
    inputs:
      bump-type:
        required: false
        type: string
    secrets:
      token:
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_REPO: ${{ github.repository_owner }}/acore-sdk-test
  IMAGE_REPO_PROD: ${{ github.repository_owner }}/acore-sdk-prod

jobs:
  build-and-scan:
    env:
      REGISTRY: ghcr.io
      IMAGE_REPO: ${{ github.repository_owner }}/acore-sdk-test
    name: Build and scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Compute full image name (lowercase)
        id: name
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/$(echo "${{ env.IMAGE_REPO }}" | tr '[:upper:]' '[:lower:]')"
          echo "image=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Generate image tags and labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.name.outputs.image }}
          tags: |
            type=sha
            type=raw,value=latest
            type=ref,event=tag
          labels: |
            org.opencontainers.image.version=v0.1.0

      - name: Build image to OCI tar (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Containerfile
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=./image.tar

      - name: Trivy scan (image tar)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          input: ./image.tar
          format: table
          severity: CRITICAL,HIGH
          exit-code: '0'

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-image
          path: ./image.tar
          retention-days: 1

  push-image:    
    env:
      REGISTRY: ghcr.io
      IMAGE_REPO: ${{ github.repository_owner }}/acore-sdk-test
    name: Push image to GHCR
    runs-on: ubuntu-24.04
    needs: build-and-scan
    permissions:
      contents: read
      packages: write

    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: built-image
          path: .

      - name: Compute full image name (lowercase)
        id: name
        shell: bash
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/$(echo "${{ env.IMAGE_REPO }}" | tr '[:upper:]' '[:lower:]')"
          echo "image=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Generate image tags to push
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.name.outputs.image }}
          tags: |
            type=sha
            type=raw,value=latest
            type=ref,event=tag

      - name: Docker login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load image from tar
        run: docker load -i image.tar

      - name: Push all tags
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        shell: bash
        run: |
          echo "$TAGS" | while IFS= read -r tag; do
            echo "Pushing $tag"
            docker push "$tag"
          done


  run_with_podman:
    env:
      REGISTRY: ghcr.io
      IMAGE_REPO: ${{ github.repository_owner }}/acore-sdk-test
    name: Run container with Podman
    runs-on: ubuntu-latest
    needs: [build-and-scan, push-image]
    permissions:
      contents: read
      packages: read

    steps:
      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Login to GHCR with Podman
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Pull and run container with Podman
        env:
          IMAGE_NAME: ${{ needs.build-and-scan.outputs.image_name }}
          VERSION: v0.1.0
        run: |
          # Pull the image
          podman pull "${IMAGE_NAME}:${VERSION}"
          
          # Run the container (example: just show version info)
          echo "Running container with Podman..."
          podman run --rm "${IMAGE_NAME}:${VERSION}" gcc --version
          podman run --rm "${IMAGE_NAME}:${VERSION}" cmake --version
          
          # You can add more commands here as needed
          # For example, if you want to run it interactively or with specific commands:
          # podman run --rm -it "${IMAGE_NAME}:${VERSION}" /bin/bash

      - name: Clean up Podman
        if: always()
        run: |
          podman system prune -f
          podman logout ${{ env.REGISTRY }}
