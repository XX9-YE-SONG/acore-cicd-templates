name: A-core workflow

on:
  workflow_call:
    inputs:
      app-name:
        required: true
        type: string
      version-type:
        required: true
        type: string
    secrets:
      token:
        required: false

jobs:
  linter:
    if:  github.event_name != 'workflow_dispatch' || github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: linter
        run: |
          echo "linter job"

  build-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: build app
        run: |
          echo "build job"

  containerfile-scan:
    if:  github.event_name != 'workflow_dispatch' || github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: containerfile-scan
        run: |
          echo "containerfile-scan job"

  image-scan:
    if:  github.event_name != 'workflow_dispatch' || github.ref_name == 'main'
    needs: [build-app, containerfile-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: containerfile-scan
        run: |
          echo "containerfile-scan job"

  test:
    if:  github.event_name != 'workflow_dispatch' || github.ref_name == 'main'
    needs: [build-app]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: containerfile-scan
        run: |
          echo "containerfile-scan job"

  push-test:
    if: |
      (github.event_name == 'pull_request' && github.base_ref == 'main') ||
      (github.event_name == 'workflow_dispatch' && github.ref_name != 'main')
    needs: [build-app]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: containerfile-scan
        run: |
          echo "containerfile-scan job"

  check-pr-label:
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Get PR Labels and Count Version Labels
        id: count-labels
        run: |
          readarray -t VERSION_LABELS <<< "$(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH" | grep -E '^(major|minor|patch|none)$')"
          VERSION_LABELS_COUNT=${#VERSION_LABELS[@]}
          echo "Found $VERSION_LABELS_COUNT version labels ('major', 'minor', 'patch', 'none')."
          if [ "$VERSION_LABELS_COUNT" -eq 1 ]; then
            FOUND_LABEL="${VERSION_LABELS[0]}"
            echo "Exactly one version label found: '$FOUND_LABEL'"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT 
          fi
      - name: Fail if incorrect number of version labels
        if: steps.count-labels.outputs.status == 'failure'
        run: |
          echo "Error: Pull request must have exactly one of the following labels: 'major', 'minor', 'patch' or 'none'."
          echo "Please ensure only one of these labels is applied to the pull request."
          exit 1
        
  determine-version:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    
    steps:
      - uses: actions/checkout@v5
      - name: Run on Push Event
        if: github.event_name == 'push'
        run: |
          echo "This step runs only when the workflow is triggered by a 'push' event."
          MERGE_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Merge Commit Message: $MERGE_COMMIT_MESSAGE"
          PR_ID=$(echo "$MERGE_COMMIT_MESSAGE" | grep -oP 'Merge pull request #\K\d+' || true)
          if [ -z "$PR_ID" ]; then
            echo "::error::Could not find a Pull Request ID in the merge commit message. This job requires a PR ID to proceed."
            exit 1
          fi
          echo "Extracted Pull Request ID: $PR_ID"
          ALL_PR_LABELS=$(gh pr view "$PR_ID" --json labels -q '.labels[].name')
          readarray -t VERSION_LABELS <<< "$(echo "$ALL_PR_LABELS" | grep -E '^(major|minor|patch|none)$')"
          FOUND_LABEL="${VERSION_LABELS[0]}"
          echo "pr_version_label=$FOUND_LABEL" >> $GITHUB_OUTPUT
          if [ "$FOUND_LABEL" == "none" ]; then
            echo "PR has 'none' label. No version bump required. Ending step gracefully."
            exit 0 
          fi
          echo "PR version label is: $FOUND_LABEL"
          LATEST_TAG=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "The latest tag is: $LATEST_TAG"
          CURRENT_VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          echo "Current version components: Major=$MAJOR, Minor=$MINOR, Patch=$PATCH"
          case "$FOUND_LABEL" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Bumped version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Run on Workflow Dispatch Event
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "This step runs only when the workflow is triggered by a 'workflow_dispatch' (manual) event."
          echo "You manually triggered this workflow!"
        
  push-prod:
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    needs: [linter, build-app, containerfile-scan, image-scan, test, determine-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: containerfile-scan
        run: |
          echo "containerfile-scan job"

  bump-version :
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    needs: [push-prod]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: containerfile-scan
        run: |
          echo "containerfile-scan job"


      
        
        
